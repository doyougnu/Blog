#+TITLE: Speaking with machines
#+SUBTITLE: A blog about programming languages
#+DATE: <2020-03-29 Sun>
#+OPTIONS: H:2 toc:nil num:nil


* Pl related posts

** [[file:testPL.org][test pl post]]                                                    :dnd:test:

** two                                                             :research:

   #+begin_src haskell
-- | Generalization of 'Data.SBV.Control.getIndependentOptResults'
getIndependentOptResults :: forall m. (MonadIO m, MonadQuery m) => [String] -> m [(String, SMTResult)]
getIndependentOptResults objNames = do cfg <- getConfig
                                       cs  <- checkSat

                                       case cs of
                                         Unsat  -> getUnsatCoreIfRequested >>= \mbUC -> return [(nm, Unsatisfiable cfg mbUC) | nm <- objNames]
                                         Sat    -> continue (classifyModel cfg)
                                         DSat{} -> continue (classifyModel cfg)
                                         Unk    -> do ur <- Unknown cfg <$> getUnknownReason
                                                      return [(nm, ur) | nm <- objNames]

  where continue classify = do objectiveValues <- getObjectiveValues
                               nms <- zipWithM getIndependentResult [0..] objNames
                               return [(n, classify (m {modelObjectives = objectiveValues})) | (n, m) <- nms]

        getIndependentResult :: Int -> String -> m (String, SMTModel)
        getIndependentResult i s = do m <- getModelAtIndex (Just i)
                                      return (s, m)

   #+end_src
#+begin_src haskell
data Foo = Bar | Baz deriving (Eq)
#+end_src

* Tools

* Other (read rants)
